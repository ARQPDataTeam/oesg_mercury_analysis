
import numpy as np
from datetime import datetime as dt
import calendar
import glob
import pandas as pd
#matplotlib.use('Agg')
import matplotlib.pyplot as plt
plt.ion()
import psycopg2, psycopg2.extras
import gc, re
import pymannkendall as mk
from sqlalchemy import create_engine

# local module import
from credentials import sql_engine_string_generator

ipcc_region = 'N.W.North-America'
species='TGM'

# create the sql engine from a string generated by the string generator
sql_engine_string=sql_engine_string_generator('QP_SERVER','QP_HGEE_USER','QP_HGEE_PASSWORD','hgee')
sql_engine=create_engine(sql_engine_string)

sql_data_query = """
                set time zone GMT;
                select datetime, site, quantity from all__hgee_v2 where IPCC_region = '{}' and species = '{}' order by datetime limit 1000;
            """.format(ipcc_region,species)

with sql_engine.connect() as conn:
# create the dataframes from the sql query
    mercury_df=pd.read_sql_query(sql_data_query, conn)

print (mercury_df['site'].unique())
# print (mercury_df['datetime'].dt.month)

# define a master dataframe with month columns

###### set some plotting defaults#
SMALL_SIZE = 16
MEDIUM_SIZE = 20
BIGGER_SIZE = 24

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title

#################################

##################### function out the monthly slice to deal with the input dataframe ###########
# this function splits the dataframe, which has a datetime index, into monthly chunks (all Feb aligned etc)
# this way a trend can be calculated for each month, or a box plot done as well

def monthly_df_slicer(mercury_df,site,species):

    # split out the full time series into monthly sub-sections
    month_list=[] # initialize a blank month list
    for i in range(1,13):
        month_list.append(calendar.month_name[i][:3])

    # create a blank dataframe with 12 column months and 31 calendar days as the index
    master_monthly_df=pd.DataFrame(columns=month_list)

    for i, month in enumerate(month_list):
        print (month)
        datetime_month=i+1
        # print (mercury_df['datetime'].dt.month==datetime_month)
        monthly_df_index = mercury_df.loc[mercury_df['datetime'].dt.month==datetime_month].index
        print (mercury_df.loc[monthly_df_index,'quantity'].reset_index(drop=True))
        master_monthly_df[month]=mercury_df.loc[monthly_df_index,'quantity'].reset_index(drop=True)

    return master_monthly_df

master_monthly_df = monthly_df_slicer(mercury_df,'Esther','TGM')
print (master_monthly_df)

#### plotting box and whisker plots
fig,ax=plt.subplots(figsize=(12,8))

master_monthly_df.boxplot(ax=ax)
ax.set_title(species+' Monthly Box Plot for: '+ipcc_region)
ax.set_ylabel('Concentration ($u$gm$\mathregular{^3}$)')
ax.set_xlabel('Month')
ax.yaxis.grid(True, which='major', linestyle='-', linewidth=0.25)
ax.xaxis.grid(False)
plt.show(block=True)


#     # histogram the mercury values
#     histogram_bins=linspace(min(tgm_array), max(tgm_array),41)

#     # axis_array=filled_monthly_mercury_df.hist(column='Mercury_concentration',bins=histogram_bins)
#     # for ax in axis_array.flatten():
#     #     ax.set_xlabel('TGM Values')
#     #     ax.set_ylabel('Count')
                             
    
    
#     # plot the probability density estimate based on a gaussian kernel

#     fig,ax=plt.subplots(figsize=(8,5))
#     ax_twin=ax.twinx()
#     ax.plot(tgm_vals,tgm_pdf,color='r')
#     ax_twin.hist(tgm_array,bins=histogram_bins)
#     ax.set_xlabel('TGM Values')
#     ax.set_ylabel('PDF Values')
#     ax_twin.set_ylabel('Counts')
#     fig.show()
    
    
#     # fig,ax=plt.subplots(figsize=(8,5))
#     # ax.plot(enso_vals,enso_pdf)
#     # ax.set_xlabel('ENSO Values')
#     # fig.show()

#     fig,ax=plt.subplots(figsize=(8,5))
#     ax.plot(ao_vals,ao_pdf)
#     ax.set_xlabel('AO Values')
#     fig.show()

#     # plot the data as a quick test
#     fig,ax=plt.subplots(figsize=(8,5))
#     # set up a tertiary y-axis
#     # ax3 = ax.twinx()
#     # rspine = ax3.spines['right']
#     # rspine.set_position(('axes', 1.15))
#     # ax3.set_frame_on(True)
#     # ax3.patch.set_visible(False)
#     # fig.subplots_adjust(right=0.7)
    
#     monthly_mercury_df.plot(ax=ax, color='k')
#     ao_df.AO_index.plot(ax=ax,color='r',secondary_y=True)
#     ax.set_xlabel('Date')
#     ax.set_ylabel('Concentration (ng m$^{-3}$)')
#     ax.right_ax.set_ylabel('AO Index')
    
    
#     ax.legend([ax.get_lines()[0],ax.right_ax.get_lines()[0]],['TGM','AO Index'], loc='lower right', frameon=True) 
    
#     fig.suptitle('Daily TGM Average')
#     fig.show()
#     plt.savefig('C:\\Users\\haos\\Documents\\Python Scripts\\Mutual Information\\mercury\\plots\\dailyTGM-average.png')
# #    plt.close(fig)
#     #result=mk.original_test(data)

