
import numpy as np
from datetime import datetime as dt
import calendar
import glob
import pandas as pd
#matplotlib.use('Agg')
import matplotlib.pyplot as plt
plt.ion()
import psycopg2, psycopg2.extras
import gc, re
import pymannkendall as mk
from sqlalchemy import create_engine
import geopandas as gp


# local module import
from credentials import sql_engine_string_generator

# import the ipcc regions as a dataframe
ipcc_analysis_df=pd.read_csv('\\\econm3hwvfsp008.ncr.int.ec.gc.ca/arqp_data/Projects/OnGoing/Mercury/HGEE-Minamata/ipcc_regions.csv')
# print(ipcc_analysis_df)
ipcc_regions_list = ['N.W.North-America']#,'N.E.North-America','W.North-America']

# create the sql engine from a string generated by the string generator
sql_engine_string = sql_engine_string_generator('QP_SERVER','QP_HGEE_USER','QP_HGEE_PASSWORD','hgee')
sql_engine = create_engine(sql_engine_string)
# print (ipcc_analysis_df['IPCC Region'])
# initialize a dataframe for ipcc mann_kendall results
ipcc_analysis_df.set_index('IPCC Region', drop=True, inplace=True) # set the ipcc regions as the index
ipcc_analysis_df.index.rename('IPCC Region', inplace=True) # rename the index
ipcc_analysis_df['MK Slope']=np.nan # add a blank list for the MK results
# print(ipcc_analysis_df)
# loop through the ipcc regions

# loop through the mercury species
ipcc_master_df=pd.DataFrame() # create an empty dataframe to house each concentration query by ipcc_region column

# for ipcc_region in ipcc_analysis_df['IPCC Region']:
for ipcc_region in ipcc_regions_list:#ipcc_analysis_df.index:
    print (ipcc_region)

    # define a sql query to grab the concentration from a particular site for a particular species from 2010 on
    # sql_data_query = """
    #                 set time zone GMT;
    #                 select datetime, site, species, concentration from all__hgee_v2 where (IPCC_region = '{}' and species in ('TGM', 'GEM') and datetime > '2010-01-01' and concentration is not null and concentration >=0 and concentration < 500 and flag_des is null) order by site;
    #             """.format(ipcc_region)

    sql_data_query = """
                    SELECT 
                        site, 
                        AVG(concentration) AS avg_concentration, 
                        STDDEV(concentration) AS stdev_concentration
                    FROM all__hgee_v2
                    GROUP BY site;
                """

    with sql_engine.connect() as conn:
    # create the dataframes from the sql query
        mercury_df = pd.read_sql_query(sql_data_query, conn)

    if mercury_df.shape[0]!=0:

        # determine the site list
        site_list=mercury_df['site'].unique()
        site_count=len(site_list)
        print (mercury_df.shape)
        # print (mercury_df['datetime'].dt.month)

        # create a dataframe to contain the site means and variances
        ipcc_site_mean_df = pd.DataFrame(index=site_list, columns=['mean','std'])
        for site in site_list:
            print (site)
            print (mercury_df.loc[mercury_df.loc[:,'site']==site,'concentration'].mean())
            ipcc_site_mean_df.loc[site,'mean'] = mercury_df.loc[mercury_df.loc[:,'site']==site,'concentration'].mean()
            ipcc_site_mean_df.loc[site,'std'] = mercury_df.loc[mercury_df.loc[:,'site']==site,'concentration'].std()

        
        ipcc_site_mean_df = ipcc_site_mean_df.reset_index(drop=False)#.sort_values(by=['index'])
        ipcc_site_mean_df.columns=['site','mean','std']
        ipcc_site_mean_df.sort_values(by=['mean'], inplace=True)
        print (ipcc_site_mean_df.columns)

        # plot the means and std's
        plt.figure(figsize=(8, 5))
        plt.errorbar(ipcc_site_mean_df['site'], ipcc_site_mean_df['mean'], yerr=ipcc_site_mean_df['std'], fmt='o', capsize=5, capthick=2, elinewidth=1.5, marker='s', markersize=8, rot=90)
        # ipcc_site_mean_df.plot.scatter('site', 'mean', yerr='std', capsize=3, title=('Mean Site TGM/GEM for '+ipcc_region),xlabel='Site',ylabel='Concentration (ngm$\mathregular{^3}$)',rot=90)
        # ax.set_title('Mean Site TGM/GEM for ',ipcc_region)
        # ax.set_xlabel('Site')
        # ax.set_ylabel('Concentration (ngm$\mathregular{^-3}$)')
        plt.tight_layout()
        plt.show(block=True)
        plt.savefig('\\\econm3hwvfsp008.ncr.int.ec.gc.ca/arqp_data/Projects/OnGoing/Mercury/HGEE-Minamata/Results and Plots/mean_concentration_'+ipcc_region+'.png')

        ##################### function out the monthly slice to deal with the input dataframe ###########
        # this function splits the dataframe, which has a datetime index, into monthly chunks (all Feb aligned etc)
        # this way a trend can be calculated for each month, or a box plot done as well

        # split out the full time series into monthly sub-sections
        def monthly_box_plotter(mercury_df):
            month_list=[] # initialize a blank month list
            for i in range(1,13):
                month_list.append(calendar.month_name[i][:3])

            # create a blank dataframe with 12 column months and 31 calendar days as the index
            master_monthly_df=pd.DataFrame(columns=month_list)

            for i, month in enumerate(month_list):
                print (month)
                datetime_month=i+1
                # print (mercury_df['datetime'].dt.month==datetime_month)
                monthly_df_index = mercury_df.loc[mercury_df['datetime'].dt.month==datetime_month].index
                # print (mercury_df.loc[monthly_df_index,'concentration'].reset_index(drop=True))
                master_monthly_df[month]=mercury_df.loc[monthly_df_index,'concentration'].reset_index(drop=True)

            # master_monthly_df = monthly_df_slicer(mercury_df,'Esther','TGM')
            # print (master_monthly_df)

            #### plotting box and whisker plots
            fig,ax=plt.subplots(figsize=(12,8))

            master_monthly_df.boxplot(ax=ax)
            ax.set_title(' Monthly '+species+' Box Plot for: '+ipcc_region)
            ax.set_ylabel('Concentration (ngm$\mathregular{^3}$)')
            ax.set_xlabel('Month')
            ax.yaxis.grid(True, which='major', linestyle='-', linewidth=0.25)
            ax.xaxis.grid(False)
            # plt.show(block=True)
            plt.savefig('\\\econm3hwvfsp008.ncr.int.ec.gc.ca/arqp_data/Projects/OnGoing/Mercury/HGEE-Minamata/Results and Plots/box-plot_'+ipcc_region+'_'+species+'.png')

        def mann_kendall(mercury_df):
            # check the time resolution and sub-sample if the array length is too long
            time_resolution = pd.to_timedelta(np.diff(mercury_df.index).mean()) # calculate the average time resolution
            print (time_resolution)
            if time_resolution < pd.Timedelta(days=1):
                # sub-sample the data so that the MK calculation does not choke on itself
                mercury_sub_sampled_concentration_series=mercury_df['concentration'].resample('1d').mean()
            # run the MK calculation
            result = mk.original_test(mercury_sub_sampled_concentration_series).slope

            # calculate the beginning spatial average
            print (mercury_sub_sampled_concentration_series.iloc[0])

            # calculate the percent change 
            percent_slope=result/mercury_sub_sampled_concentration_series.iloc[0]*100
            print ('percent slope',percent_slope)
            # result=
            return percent_slope

        input_concentration_series=pd.Series(mercury_df['concentration'].values, name=ipcc_region)
        print (input_concentration_series)
        ipcc_master_df=pd.concat([ipcc_master_df,input_concentration_series], axis=1)
        print (ipcc_master_df)
        # run the box plotter
        # monthly_box_plotter(mercury_df)

        # run mann-kendall test
        ipcc_analysis_df.loc[ipcc_region,'MK Slope'] = mann_kendall(mercury_df)
        print ('ipcc_analysis_df.loc[ipcc_region,MK Slope]')
        print (ipcc_analysis_df.loc[ipcc_region,'MK Slope'])




ipcc_analysis_df.dropna(inplace=True)

print (ipcc_analysis_df)
print ('plotting')
ipcc_analysis_df.to_csv('\\\econm3hwvfsp008.ncr.int.ec.gc.ca/arqp_data/Projects/OnGoing/Mercury/HGEE-Minamata/Results and Plots/mk_output_'+species+'.csv')

# bar plot the slope dataframe
fig,ax=plt.subplots(figsize=(12,8))
ipcc_analysis_df.plot.bar(ax=ax, color=np.where(ipcc_analysis_df['MK Slope'] < 0, 'red', 'blue'))
ax.set_title('IPCC Mercury % Change: 2010 - Present for '+species)
ax.set_xlabel('IPCC Region')
ax.set_ylabel('% Change in '+species+' Concentration')
fig.tight_layout()
plt.savefig('\\\econm3hwvfsp008.ncr.int.ec.gc.ca/arqp_data/Projects/OnGoing/Mercury/HGEE-Minamata/Results and Plots/percent_concentration_change_'+species+'.png')

# plot the master dataframe as a box plot by ipcc_region, not split into months

fig,ax=plt.subplots(figsize=(12,8))
ipcc_master_df.boxplot(ax=ax)
ax.set_title('Box Plot by IPCC Region for '+species)
ax.set_ylabel(species+' Concentration (ngm$\mathregular{^3}$)')
ax.set_xlabel('IPCC Region')
ax.yaxis.grid(True, which='major', linestyle='-', linewidth=0.25)
ax.xaxis.grid(False)
# plt.show(block=True)
fig.tight_layout()
plt.savefig('\\\econm3hwvfsp008.ncr.int.ec.gc.ca/arqp_data/Projects/OnGoing/Mercury/HGEE-Minamata/Results and Plots/total_box-plot_'+species+'.png')

#     # histogram the mercury values
        # ###### set some plotting defaults#
        # SMALL_SIZE = 16
        # MEDIUM_SIZE = 20
        # BIGGER_SIZE = 24

        # plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
        # plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
        # plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
        # plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
        # plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
        # plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
        # plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title

        #################################

#     histogram_bins=linspace(min(tgm_array), max(tgm_array),41)

#     # axis_array=filled_monthly_mercury_df.hist(column='Mercury_concentration',bins=histogram_bins)
#     # for ax in axis_array.flatten():
#     #     ax.set_xlabel('TGM Values')
#     #     ax.set_ylabel('Count')
                             
    
    
#     # plot the probability density estimate based on a gaussian kernel

#     fig,ax=plt.subplots(figsize=(8,5))
#     ax_twin=ax.twinx()
#     ax.plot(tgm_vals,tgm_pdf,color='r')
#     ax_twin.hist(tgm_array,bins=histogram_bins)
#     ax.set_xlabel('TGM Values')
#     ax.set_ylabel('PDF Values')
#     ax_twin.set_ylabel('Counts')
#     fig.show()
    
    
#     # fig,ax=plt.subplots(figsize=(8,5))
#     # ax.plot(enso_vals,enso_pdf)
#     # ax.set_xlabel('ENSO Values')
#     # fig.show()

#     fig,ax=plt.subplots(figsize=(8,5))
#     ax.plot(ao_vals,ao_pdf)
#     ax.set_xlabel('AO Values')
#     fig.show()

#     # plot the data as a quick test
#     fig,ax=plt.subplots(figsize=(8,5))
#     # set up a tertiary y-axis
#     # ax3 = ax.twinx()
#     # rspine = ax3.spines['right']
#     # rspine.set_position(('axes', 1.15))
#     # ax3.set_frame_on(True)
#     # ax3.patch.set_visible(False)
#     # fig.subplots_adjust(right=0.7)
    
#     monthly_mercury_df.plot(ax=ax, color='k')
#     ao_df.AO_index.plot(ax=ax,color='r',secondary_y=True)
#     ax.set_xlabel('Date')
#     ax.set_ylabel('Concentration (ng m$^{-3}$)')
#     ax.right_ax.set_ylabel('AO Index')
    
    
#     ax.legend([ax.get_lines()[0],ax.right_ax.get_lines()[0]],['TGM','AO Index'], loc='lower right', frameon=True) 
    
#     fig.suptitle('Daily TGM Average')
#     fig.show()
#     plt.savefig('C:\\Users\\haos\\Documents\\Python Scripts\\Mutual Information\\mercury\\plots\\dailyTGM-average.png')
# #    plt.close(fig)
#     #result=mk.original_test(data)

